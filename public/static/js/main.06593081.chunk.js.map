{"version":3,"sources":["components/AppBar.js","components/CouresesTable.js","utils/RTL.js","components/WorkerForm.js","components/WorkersTable.js","utils/APIUtils.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","CouresesTable","props","columns","field","data","trainings","localization","pagination","labelDisplayedRows","toolbar","nRowsSelected","header","actions","body","emptyDataSourceMessage","filterRow","filterTooltip","addTooltip","deleteTooltip","editTooltip","editRow","deleteText","cancelTooltip","saveTooltip","labelRowsSelect","searchTooltip","searchPlaceholder","jss","create","plugins","jssPreset","rtl","RTL","StylesProvider","children","dialogTitle","textAlign","workerInfoField","width","marginLeft","direction","tableContainer","marginTop","WorkerForm","useState","worker","tempWorker","setTempWorker","handleFieldChange","event","target","id","value","handleClose","onClose","Dialog","open","maxWidth","DialogTitle","DialogContent","dividers","Box","display","flexDirection","flexWrap","justifyContent","name","label","type","map","TextField","defaultValue","InputLabelProps","shrink","onChange","DialogActions","Button","onSaveChanges","WorkersTable2","openDialog","setOpenDialog","selectedWorker","setSelectedWorker","setError","isLoaded","setIsLoaded","workers","setWorkers","useEffect","axios","get","then","res","catch","err","console","error","openWorkerDialog","workerId","params","React","required","status","completionDate","instructorName","icon","tooltip","rowData","foundIndex","findIndex","updateWorkerInfo","createMuiTheme","backgroundColor","typography","fontFamily","App","ThemeProvider","key","path","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.06593081.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick=\"handleDrawerOpen\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            מערכת ניהול עובדים והדרכות\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\n\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function CouresesTable(props) {\r\n\r\n    // const [state, setState] = React.useState({\r\n    //     columns: [\r\n    //         { field: 'name', title: 'שם' },\r\n    //         { field: 'isRequired', title: 'נדרש' },\r\n    //         { field: 'status', title: 'סטטוס' },\r\n    //         { field: 'completionDate', title: 'תאריך ביצוע' },\r\n    //         { field: 'expiryDate', title: 'תאריך תפוגה' },\r\n    //         { field: 'trainerName', title: 'שם מדריך' }\r\n    //     ],\r\n    //     data: [\r\n    //         { name: 'הדרכת בטיחות', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n    //         { name: 'IOS', required: 'לא', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n    //         { name: 'הדרכת אש', required: 'לא', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n    //         { name: 'הדרכת מים', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n    //         { name: 'הדרכת מלגזנים', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n    //         { name: 'רשיון מלגזן', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n    //         { name: 'הדרכת עובדים', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' }\r\n    //     ]\r\n    // });\r\n\r\n    const fields = [\r\n        { field: 'name', title: 'שם' },\r\n        { field: 'isRequired', title: 'נדרש' },\r\n        { field: 'status', title: 'סטטוס' },\r\n        { field: 'completionDate', title: 'תאריך ביצוע' },\r\n        { field: 'expiryDate', title: 'תאריך תפוגה' },\r\n        { field: 'trainerName', title: 'שם מדריך' }\r\n    ]\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"הדרכות\"\r\n            columns={fields}\r\n            data={props.trainings}\r\n            localization={{\r\n                pagination: {\r\n                    labelDisplayedRows: '{from}-{to} מתוך {count}'\r\n                },\r\n                toolbar: {\r\n                    nRowsSelected: '{0} שורות נבחרו'\r\n                },\r\n                header: {\r\n                    actions: 'פעולות'\r\n                },\r\n                body: {\r\n                    emptyDataSourceMessage: 'אין רשומות להצגה',\r\n                    filterRow: {\r\n                        filterTooltip: 'סינון'\r\n                    },\r\n                    addTooltip: 'הוספה',\r\n                    deleteTooltip: 'מחיקה',\r\n                    editTooltip: 'עריכה',\r\n                    editRow: {\r\n                        deleteText: 'האם אתה בטוח שברצונך למחוק שורה זו?',\r\n                        cancelTooltip: 'ביטול',\r\n                        saveTooltip: 'שמור'\r\n                    }\r\n                },\r\n                pagination: {\r\n                    labelRowsSelect: 'שורות'\r\n                },\r\n                toolbar: {\r\n                    searchTooltip: 'חיפוש',\r\n                    searchPlaceholder: 'חיפוש'\r\n                }\r\n            }}\r\n            // editable={{\r\n            //     onRowAdd: (newData) =>\r\n            //         new Promise((resolve) => {\r\n            //             setTimeout(() => {\r\n            //                 resolve();\r\n            //                 setState((prevState) => {\r\n            //                     const data = [...prevState.data];\r\n            //                     data.push(newData);\r\n            //                     return { ...prevState, data };\r\n            //                 });\r\n            //             }, 600);\r\n            //         }),\r\n            //     onRowUpdate: (newData, oldData) =>\r\n            //         new Promise((resolve) => {\r\n            //             setTimeout(() => {\r\n            //                 resolve();\r\n            //                 if (oldData) {\r\n            //                     setState((prevState) => {\r\n            //                         const data = [...prevState.data];\r\n            //                         data[data.indexOf(oldData)] = newData;\r\n            //                         return { ...prevState, data };\r\n            //                     });\r\n            //                 }\r\n            //             }, 600);\r\n            //         }),\r\n            //     onRowDelete: (oldData) =>\r\n            //         new Promise((resolve) => {\r\n            //             setTimeout(() => {\r\n            //                 resolve();\r\n            //                 setState((prevState) => {\r\n            //                     const data = [...prevState.data];\r\n            //                     data.splice(data.indexOf(oldData), 1);\r\n            //                     return { ...prevState, data };\r\n            //                 });\r\n            //             }, 600);\r\n            //         }),\r\n            // }}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\r\n\r\n\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nexport default function RTL(props) {\r\n    return (\r\n        <StylesProvider jss={jss}>\r\n            {props.children}\r\n        </StylesProvider>\r\n    );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport CoursesTable from './CouresesTable';\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { DialogActions } from '@material-ui/core';\r\n\r\nimport RTL from '../utils/RTL';\r\n\r\nconst useStyles = makeStyles({\r\n    dialogTitle: {\r\n        textAlign: \"center\"\r\n    },\r\n    workerInfoField: {\r\n        width: 170,\r\n        marginLeft: 20,\r\n        direction: \"rtl\"\r\n    },\r\n    tableContainer: {\r\n        marginTop: '20px'\r\n    }\r\n});\r\n\r\nexport default function WorkerForm(props) {\r\n    const classes = useStyles();\r\n    const [tempWorker, setTempWorker] = useState(props.worker);\r\n\r\n    const handleFieldChange = (event) => {\r\n        let worker = tempWorker;\r\n        worker[`${event.target.id}`] = event.target.value;\r\n        setTempWorker(worker);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.onClose();\r\n    };\r\n\r\n    const handleSave = () => {\r\n        props.onSaveChanges(tempWorker);\r\n    }\r\n\r\n    const fields = [\r\n        { name: 'workerId', label: 'מספר עובד' },\r\n        { name: 'firstName', label: 'שם פרטי' },\r\n        { name: 'lastName', label: 'שם משפחה' },\r\n        { name: 'birthDate', label: 'תאריך לידה', type: 'datePicker' },\r\n        { name: 'age', label: 'גיל'},\r\n        { name: 'sex', label: 'מין'},\r\n        { name: 'startDate', label: 'תאריך התחלה', type: 'datePicker' },\r\n        { name: 'idNumber', label: 'תעודת זהות'},\r\n        { name: 'phoneNumber', label: 'טלפון'},\r\n        { name: 'phoneNumber2', label: 'טלפון 2'},\r\n        { name: 'city', label: 'עיר'},\r\n        { name: 'address', label: 'כתובת'},\r\n        { name: 'zipCode', label: 'מיקוד'},\r\n        { name: 'departmentHE', label: 'מחלקה'},\r\n        { name: 'departmentEN', label: 'Department'},\r\n        { name: 'roleEmergency', label: 'תפקיד חרום'},\r\n        { name: 'role', label: 'תפקיד'},\r\n        { name: 'team', label: 'תת מחלקה'},\r\n    ]\r\n    \r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={props.open} maxWidth='xl'>\r\n            <DialogTitle className={classes.dialogTitle}>פרטי עובד</DialogTitle>\r\n            <DialogContent dividers>\r\n\r\n                <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\" justifyContent=\"flex-start\">\r\n                    {fields.map(field => {\r\n                        return field.type === 'datePicker' ?\r\n                            <RTL>\r\n                                <TextField\r\n                                    id={field.name}\r\n                                    label={field.label}\r\n                                    type=\"date\"\r\n                                    defaultValue={tempWorker[field.name]}\r\n                                    className={classes.workerInfoField}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                            </RTL>\r\n                            :\r\n                            <RTL>\r\n                                <TextField defaultValue={tempWorker[field.name]} className={classes.workerInfoField} id={field.name} label={field.label} onChange={handleFieldChange} ></TextField>\r\n                            </RTL>\r\n                    })\r\n                    }\r\n                </Box>\r\n                <CoursesTable trainings={tempWorker.trainings}/>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleSave}>\r\n                    שמור\r\n                </Button>\r\n                <Button onClick={handleClose}>\r\n                    בטל\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n","import React, {useEffect, useState, Fragment} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { getWorkers, getTrainings } from '../utils/APIUtils'\r\nimport WorkerForm from './WorkerForm';\r\n\r\n\r\n\r\nexport default function WorkersTable2() {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [selectedWorker, setSelectedWorker] = useState();\r\n\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [workers, setWorkers] = useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n        getWorkers()\r\n        .then(res => {\r\n            setWorkers(res.data);\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            setError(err);\r\n        });\r\n    }, [])\r\n\r\n\r\n    const openWorkerDialog = (worker) => {\r\n        let trainings = [];\r\n        getTrainings(worker.workerId)\r\n        .then(res => {\r\n            trainings = res.data.trainings\r\n        })\r\n        .catch(err => console.error(err))\r\n        .then(() => {\r\n            worker.trainings = trainings;\r\n            setSelectedWorker(worker);\r\n            setOpenDialog(true);\r\n        });\r\n    }\r\n\r\n    const closeWorkerDialog = () => {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const updateWorkerInfo = (tempWorker) => {\r\n        const foundIndex = workers.findIndex(worker => worker.workerId === tempWorker.workerId);\r\n        workers[foundIndex] = tempWorker;\r\n    }\r\n\r\n    const fields = [\r\n        { field: 'workerId', title: 'מספר עובד' },\r\n        { field: 'firstName', title: 'שם פרטי' },\r\n        { field: 'lastName', title: 'שם משפחה' },\r\n        { field: 'birthDate', title: 'תאריך לידה', type: 'datePicker' },\r\n        { field: 'age', title: 'גיל'},\r\n        { field: 'sex', title: 'מין'},\r\n        { field: 'startDate', title: 'תאריך התחלה'},\r\n        { field: 'idNumber', title: 'תעודת זהות'},\r\n        { field: 'phoneNumber', title: 'טלפון'},\r\n        { field: 'phoneNumber2', title: 'טלפון 2'},\r\n        { field: 'city', title: 'עיר'},\r\n        { field: 'address', title: 'כתובת'},\r\n        { field: 'zipCode', title: 'מיקוד'},\r\n        { field: 'departmentHE', title: 'מחלקה'},\r\n        { field: 'departmentEN', title: 'Department'},\r\n        { field: 'roleEmergency', title: 'תפקיד חרום'},\r\n        { field: 'role', title: 'תפקיד'},\r\n        { field: 'team', title: 'תת מחלקה'},\r\n    ]\r\n\r\n    const [state, setState] = React.useState({\r\n        columns: [\r\n            { field: 'name', title: 'שם' },\r\n            { field: 'required', title: 'נדרש' },\r\n            { field: 'status', title: 'סטטוס' },\r\n            { field: 'completionDate', title: 'תאריך ביצוע' },\r\n            { field: 'instructorName', title: 'שם מדריך' }\r\n        ],\r\n        data: [\r\n            { name: 'הדרכת בטיחות', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n            { name: 'IOS', required: 'לא', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n            { name: 'הדרכת אש', required: 'לא', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n            { name: 'הדרכת מים', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n            { name: 'הדרכת מלגזנים', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n            { name: 'רשיון מלגזן', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' },\r\n            { name: 'הדרכת עובדים', required: 'כן', status: 'בוצע', completionDate: '10/12/12', instructorName: 'אלמוג' }\r\n        ]\r\n    });\r\n\r\n    if(!isLoaded){\r\n        return <div>Loading...</div>\r\n    }\r\n    if(isLoaded){\r\n        return (\r\n            <Fragment>\r\n                <MaterialTable\r\n                title=\"הדרכות\"\r\n                columns={fields}\r\n                data={workers}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} מתוך {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} שורות נבחרו'\r\n                    },\r\n                    header: {\r\n                        actions: 'פעולות'\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'אין רשומות להצגה',\r\n                        filterRow: {\r\n                            filterTooltip: 'סינון'\r\n                        },\r\n                        addTooltip: 'הוספה',\r\n                        deleteTooltip: 'מחיקה',\r\n                        editTooltip: 'עריכה',\r\n                        editRow: {\r\n                            deleteText: 'האם אתה בטוח שברצונך למחוק שורה זו?',\r\n                            cancelTooltip: 'ביטול',\r\n                            saveTooltip: 'שמור'\r\n                        }\r\n                    },\r\n                    pagination: {\r\n                        labelRowsSelect: 'שורות'\r\n                    },\r\n                    toolbar: {\r\n                        searchTooltip: 'חיפוש',\r\n                        searchPlaceholder: 'חיפוש'\r\n                    }\r\n                    }}\r\n                    actions={[\r\n                        {\r\n                            icon: 'edit',\r\n                            tooltip: 'עריכה',\r\n                            onClick: (event, rowData) => {\r\n                                openWorkerDialog(rowData);\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {openDialog ?\r\n                    <WorkerForm worker={selectedWorker} open={openDialog} onClose={closeWorkerDialog} onSaveChanges={(tempWorker) => updateWorkerInfo(tempWorker)} />\r\n                    :\r\n                    null\r\n                }\r\n            </Fragment>\r\n            \r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport function getWorkers() {\r\n    return axios.get('http://localhost:8000/api/workers');\r\n}\r\nexport function getTrainings(workerId) {\r\n    return axios.get('http://localhost:8000/api/workers/trainings', {\r\n        params: {\r\n            workerId: workerId\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nimport AppBar from './components/AppBar';\r\nimport WorkersTable from './components/WorkersTable';\r\n\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nconst theme = createMuiTheme({\r\n  direction: \"rtl\",\r\n  backgroundColor: \"#eeeee\",\r\n  typography: {\r\n    fontFamily: \"Segoe UI\",\r\n  },\r\n});\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <AppBar></AppBar>\r\n        <Switch>\r\n          <Route key=\"mainView\" path=\"/mainView\">\r\n            <WorkersTable />\r\n          </Route>\r\n          <Redirect from=\"*\" to=\"/mainView\" />\r\n        </Switch>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App></App>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}